generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt
  address        String
  name           String
  program        String?
  metadata       Json?
  network        NetworkType
  type           AccountType
  discoveredAt   DateTime?
  discoveredBy   User?       @relation("AccountsDiscovered", fields: [discoveredById], references: [id])
  discoveredById String?
  owner          Account?    @relation("Token", fields: [ownerId], references: [id])
  ownerId        String?
  identity       Identity?   @relation(fields: [identityId], references: [id])
  identityId     String?
  tokens         Account[]   @relation("Token")
  gumProfile     Profile?    @relation("AccountGumProfile")
  gumProfileMeta Profile?    @relation("AccountGumProfileMeta")
  gumUser        User?       @relation("AccountGumUser")

  @@unique([address, network])
}

enum AccountType {
  Account
  BonfidaDomain
  BonfidaTwitter
  GumUser
  GumProfile
  GumProfileMeta
  MetaplexNFT
  Mint
  Program
  Token
  System
}

enum NetworkType {
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

model User {
  id                 String     @id @default(cuid())
  pid                Int        @unique @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now()) @updatedAt
  role               UserRole
  status             UserStatus @default(Active)
  username           String     @unique
  publicKey          String     @unique
  domains            Domain[]
  identities         Identity[]
  invites            Invite[]
  invite             Invite?    @relation("UserInvite", fields: [inviteId], references: [id])
  inviteId           String?
  followers          Follow[]   @relation("followers")
  followersCount     Int        @default(0)
  following          Follow[]   @relation("follower")
  followingCount     Int        @default(0)
  pages              Page[]
  profile            Profile?   @relation("UserProfile", fields: [profileId], references: [id])
  profileId          String?    @unique
  profiles           Profile[]
  accountsDiscovered Account[]  @relation("AccountsDiscovered")
  gumUser            Account?   @relation("AccountGumUser", fields: [gumUserId], references: [id])
  gumUserId          String?    @unique
}

model Follow {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  follower   User     @relation("followers", fields: [followerId], references: [id])
  followerId String
  owner      User     @relation("follower", fields: [ownerId], references: [id])
  ownerId    String

  @@id([ownerId, followerId])
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

model Identity {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  provider   IdentityProvider
  providerId String
  profile    Json?
  verified   Boolean          @default(false)
  accounts   Account[]
  owner      User             @relation(fields: [ownerId], references: [id])
  ownerId    String
  profiles   Profile[]

  @@unique([provider, providerId])
}

enum IdentityProvider {
  Discord
  Github
  Google
  Solana
  Twitter
}

model Invite {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  expiresAt DateTime?
  maxUses   Int       @default(0)
  useCount  Int       @default(0)
  code      String    @unique
  users     User[]    @relation("UserInvite")
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
}

model Domain {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  name      String       @unique
  order     Int          @default(0)
  premium   Boolean      @default(false)
  private   Boolean      @default(false)
  secure    Boolean      @default(true)
  owner     User         @relation(fields: [ownerId], references: [id])
  ownerId   String
  pages     PageDomain[]
}

model Page {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  status      PageStatus   @default(Draft)
  type        PageType?
  title       String?
  color       String       @default("brand")
  description String?
  blocks      PageBlock[]
  domains     PageDomain[]
  owner       User         @relation(fields: [ownerId], references: [id])
  ownerId     String
  profile     Profile?     @relation(fields: [profileId], references: [id])
  profileId   String?      @unique
}

enum PageStatus {
  Demo
  Draft
  Published
}

enum PageType {
  Degen
  Gaming
  Personal
  Professional
}

model PageBlock {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  type      PageBlockType
  data      Json
  order     Int           @default(0)
  page      Page          @relation(fields: [pageId], references: [id])
  pageId    String
}

enum PageBlockType {
  Discord
  Github
  Google
  Header
  Link
  Solana
  Twitter
}

model PageDomain {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  path      String
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  String
  page      Page     @relation(fields: [pageId], references: [id])
  pageId    String

  @@unique([domainId, path])
}

model Profile {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  type             ProfileType
  status           ProfileStatus @default(Draft)
  name             String?
  bio              String?
  username         String?
  metaUrl          String?
  avatarUrl        String?
  following        Int?
  followers        Int?
  color            String?       @default("brand")
  identities       Identity[]
  owner            User          @relation(fields: [ownerId], references: [id])
  ownerId          String
  gumProfile       Account?      @relation("AccountGumProfile", fields: [gumProfileId], references: [id])
  gumProfileId     String?       @unique
  gumProfileMeta   Account?      @relation("AccountGumProfileMeta", fields: [gumProfileMetaId], references: [id])
  gumProfileMetaId String?       @unique
  page             Page?
  // FIXME: Check if this is the right name. Could be 'default', 'primary', 'main', etc?
  user             User?         @relation("UserProfile")

  @@unique([ownerId, type])
}

enum ProfileStatus {
  Demo
  Draft
  Published
}

enum ProfileType {
  Degen
  Gaming
  Personal
  Professional
}

model Plan {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  name        String
  description String
  priceMonth  Int
  priceYear   Int
  currency    String
  available   Boolean       @default(true)
  recommended Boolean       @default(false)
  features    PlanFeature[]
}

model PlanFeature {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  order     Int      @default(0)
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
}

model Setting {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  default     String?
  description String
  key         String   @unique
  value       String?
}
