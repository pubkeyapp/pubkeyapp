# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Identity {
  id: String
  createdAt: String
  updatedAt: String
  provider: IdentityProvider
  providerId: String!
  verified: Boolean!
  owner: User
}

enum IdentityProvider {
  Discord
  Solana
}

type User {
  id: String
  pid: Int
  createdAt: String
  updatedAt: String
  name: String
  username: String
  bio: String
  avatarUrl: String
  metaUrl: String
  profileUrl: String
  publicKey: String
  role: UserRole
  status: UserStatus
  followers: [Follow!]
  followersCount: Int
  following: [Follow!]
  followingCount: Int
  identities: [Identity!]
  relation: UserRelation
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

type Follow {
  id: String
  createdAt: String
  updatedAt: String
  followerId: String
  follower: User
  ownerId: String
  owner: User
}

type UserRelation {
  isYou: Boolean!
  isFollowingYou: Boolean!
  isFollowedByYou: Boolean!
}

type Cluster {
  id: String!
  name: String!
  type: ClusterType!
  endpoint: String!
  explorerUrl: String!
}

enum ClusterType {
  Custom
  Devnet
  Mainnet
  Testnet
}

type ConfigApi {
  name: String!
  version: String!
  url: String!
}

type ConfigApp {
  description: String!
  name: String!
  url: String!
}

type Config {
  api: ConfigApi!
  app: ConfigApp!
  cluster: Cluster!
  clusters: [Cluster!]!
}

type Account {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  discoveredAt: DateTime
  discoveredBy: User
  identity: Identity
  owner: Account
  tokens: [Account!]
  name: String
  program: String
  address: String
  network: NetworkType
  type: AccountType
  explorerUrl: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum NetworkType {
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

enum AccountType {
  Account
  BonfidaDomain
  BonfidaTwitter
  Mint
  Program
  Token
  System
}

type AuthChallengeRequest {
  challenge: String!
  expiresAt: String!
}

type Domain {
  id: String
  createdAt: String
  updatedAt: String
  name: String
  order: Int
  private: Boolean
  premium: Boolean
  secure: Boolean
  owner: User
  pages: [Page!]
}

type PageDomain {
  id: String
  createdAt: String
  updatedAt: String
  path: String
  domain: Domain
  page: Page
  viewUrl: String
}

type Page {
  id: String
  createdAt: String
  updatedAt: String
  status: PageStatus
  type: PageType
  title: String
  color: String
  description: String
  viewUrl: String
  siteUrl: String
  urls: [String!]
  owner: User
  blocks: [PageBlock!]
  domains: [PageDomain!]
  previewUrl: String
}

enum PageStatus {
  Demo
  Draft
  Published
}

enum PageType {
  Degen
  Gaming
  Personal
  Professional
}

type PageBlock {
  id: String
  createdAt: String
  updatedAt: String
  name: String
  order: Int
  data: JSON
  type: PageBlockType
  page: Page
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum PageBlockType {
  Header
  Link
}

type Invite {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  expiresAt: DateTime
  code: String
  maxUses: Int
  useCount: Int
  owner: User
  users: [User!]
  inviteUrl: String
  isExpired: Boolean
  isUsedUp: Boolean
}

type PlanFeature {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  order: Int
}

type Plan {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  available: Boolean
  features: [PlanFeature!]
}

type Job {
  id: String
  data: JSON
  opts: JSON
  attemptsMade: Int
  processedOn: Int
  finishedOn: Int
  timestamp: Int
  name: String
  stacktrace: [String!]
  returnvalue: JSON
  failedReason: String
}

type QueueCount {
  active: Int
  completed: Int
  delayed: Int
  failed: Int
  paused: Int
  waiting: Int
}

type Queue {
  type: QueueType!
  name: String!
  count: QueueCount
  info: JSON
  isPaused: Boolean
}

enum QueueType {
  CloseAccount
  ParseBlock
}

type Query {
  uptime: Float!
  adminAccount(accountId: String!): Account
  adminAccounts(input: AdminListAccountInput!): [Account!]
  userAccount(network: NetworkType!, address: String!): Account
  userAccountHistory(network: NetworkType!, address: String!): JSON
  me: User
  requestChallenge(publicKey: String!): AuthChallengeRequest
  config: Config
  adminDomains(input: AdminListDomainInput): [Domain!]
  adminDomain(domainId: String!): Domain
  publicInvite(code: String!): Invite
  adminInvites(input: AdminListInviteInput): [Invite!]
  adminInvite(inviteId: String!): Invite
  publicPage(pageId: String!): Page
  adminPages(input: AdminListPageInput): [Page!]
  adminPage(pageId: String!): Page
  userPage(pageId: String!): Page
  adminPageBlock(pageBlockId: String!): PageBlock
  userPageBlock(pageBlockId: String!): PageBlock
  adminPageDomain(domainId: String!, path: String!): PageDomain
  publicPlans: [Plan!]
  adminPlans(input: AdminListPlanInput): [Plan!]
  adminPlan(planId: String!): Plan
  queue(type: QueueType!): Queue
  queueJobs(type: QueueType!, statuses: [JobStatus!]!): [Job!]
  queues: [Queue!]
  user(username: String!): User
  userFollowers(username: String!): [User!]
  userFollowing(username: String!): [User!]
  userInvites(username: String!): [Invite!]
  userPages(username: String!): [Page!]
  userProfiles(username: String!): JSON
  adminUser(userId: String!): User
  adminUsers: [User!]
}

input AdminListAccountInput {
  network: NetworkType
  type: AccountType
  address: String
  program: String
  name: String
}

input AdminListDomainInput {
  ownerId: String
}

input AdminListInviteInput {
  ownerId: String
}

input AdminListPageInput {
  ownerId: String
}

input AdminListPlanInput {
  id: String
}

enum JobStatus {
  completed
  waiting
  active
  delayed
  failed
  paused
}

type Mutation {
  logout: Boolean
  respondChallenge(challenge: String!, publicKey: String!, signature: String!): User
  adminCreateDomain(input: AdminCreateDomainInput!): Domain
  adminDeleteDomain(domainId: String!): Domain
  adminUpdateDomain(domainId: String!, input: AdminUpdateDomainInput!): Domain
  adminCreateInvite(input: AdminCreateInviteInput!): Invite
  adminDeleteInvite(inviteId: String!): Invite
  adminUpdateInvite(inviteId: String!, input: AdminUpdateInviteInput!): Invite
  adminCreatePage(input: AdminCreatePageInput!): Page
  adminDeletePage(pageId: String!): Page
  adminUpdatePage(pageId: String!, input: AdminUpdatePageInput!): Page
  userCreatePage(input: UserCreatePageInput!): Page
  userDeletePage(pageId: String!): Page
  userUpdatePage(pageId: String!, input: UserUpdatePageInput!): Page
  adminAddPageBlock(pageId: String!, input: AdminAddPageBlockInput!): PageBlock
  adminRemovePageBlock(pageId: String!, pageBlockId: String!): PageBlock
  adminUpdatePageBlock(pageId: String!, pageBlockId: String!, input: AdminUpdatePageBlockInput!): PageBlock
  userAddPageBlock(pageId: String!, input: UserAddPageBlockInput!): PageBlock
  userRemovePageBlock(pageId: String!, pageBlockId: String!): PageBlock
  userUpdatePageBlock(pageId: String!, pageBlockId: String!, input: UserUpdatePageBlockInput!): PageBlock
  adminAddPageDomain(pageId: String!, input: AdminAddPageDomainInput!): PageDomain
  adminRemovePageDomain(pageId: String!, pageDomainId: String!): PageDomain
  adminCreatePlan(input: AdminCreatePlanInput!): Plan
  adminDeletePlan(planId: String!): Plan
  adminUpdatePlan(planId: String!, input: AdminUpdatePlanInput!): Plan
  queueLoad(input: QueueLoadInput!): Queue
  queueClean(type: QueueType!): Boolean
  queueDeleteJob(type: QueueType!, jobId: String!): Boolean
  queuePause(type: QueueType!): Boolean
  queueResume(type: QueueType!): Boolean
  userFollow(username: String!): User
  userUnfollow(username: String!): User
  userUpdateUser(input: UserUpdateUserInput!): User
  adminCreateUser(input: AdminCreateUserInput!): User
  adminUpdateUser(userId: String!, input: AdminUpdateUserInput!): User
  adminDeleteUser(userId: String!): User
}

input AdminCreateDomainInput {
  name: String!
  ownerId: String
  private: Boolean
  premium: Boolean
  secure: Boolean
}

input AdminUpdateDomainInput {
  private: Boolean
  premium: Boolean
  secure: Boolean
  order: Int
}

input AdminCreateInviteInput {
  expiresAt: String
  ownerId: String
  maxUses: Int
}

input AdminUpdateInviteInput {
  expiresAt: DateTime
  maxUses: Int
}

input AdminCreatePageInput {
  title: String!
  description: String!
  ownerId: String
  color: String
  type: PageType
}

input AdminUpdatePageInput {
  title: String
  description: String
  color: String
}

input UserCreatePageInput {
  title: String!
  description: String!
  ownerId: String
  color: String
  type: PageType
}

input UserUpdatePageInput {
  title: String
  description: String
  color: String
}

input AdminAddPageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input AdminUpdatePageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input UserAddPageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input UserUpdatePageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input AdminAddPageDomainInput {
  domainId: String!
  path: String!
}

input AdminCreatePlanInput {
  name: String!
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  active: Boolean
}

input AdminUpdatePlanInput {
  name: String
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  available: Boolean
}

input QueueLoadInput {
  serverAppId: String!
  payload: JSON!
  type: QueueType!
}

input UserUpdateUserInput {
  name: String
  username: String
  avatarUrl: String
  bio: String
}

input AdminCreateUserInput {
  publicKey: String
  role: UserRole
}

input AdminUpdateUserInput {
  name: String
  avatarUrl: String
  username: String
  bio: String
  role: UserRole
  status: UserStatus
}
