# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type QueueCount {
  active: Int
  completed: Int
  delayed: Int
  failed: Int
  paused: Int
  waiting: Int
}

type Queue {
  type: QueueType!
  name: String!
  count: QueueCount
  info: JSON
  isPaused: Boolean
}

enum QueueType {
  AccountDiscover
  AccountClose
  BlockParse
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Job {
  id: String
  data: JSON
  opts: JSON
  attemptsMade: Int
  processedOn: Int
  finishedOn: Int
  timestamp: Int
  name: String
  stacktrace: [String!]
  returnvalue: JSON
  failedReason: String
}

type Identity {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  provider: IdentityProvider
  providerId: String!
  profile: JSON
  accounts: [Account!]
  verified: Boolean!
  owner: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum IdentityProvider {
  Discord
  Github
  Google
  Solana
  Twitter
}

type Account {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  discoveredAt: DateTime
  discoveredBy: User
  identity: Identity
  owner: Account
  tokens: [Account!]
  name: String
  program: String
  metadata: JSON
  address: String
  network: NetworkType
  type: AccountType
  explorerUrl: String
}

enum NetworkType {
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

enum AccountType {
  Account
  BonfidaDomain
  BonfidaTwitter
  GumUser
  GumProfile
  GumProfileMeta
  MetaplexNFT
  Mint
  Program
  Token
  System
}

type Domain {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  order: Int
  private: Boolean
  premium: Boolean
  secure: Boolean
  owner: User
  pages: [Page!]
}

type PageDomain {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  path: String
  domain: Domain
  page: Page
  viewUrl: String
}

type Page {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  status: PageStatus
  type: PageType
  title: String
  color: String
  description: String
  viewUrl: String
  siteUrl: String
  urls: [String!]
  owner: User
  blocks: [PageBlock!]
  domains: [PageDomain!]
  profile: Profile
}

enum PageStatus {
  Demo
  Draft
  Published
}

enum PageType {
  Degen
  Gaming
  Personal
  Professional
}

type PageBlock {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  order: Int
  data: JSON
  type: PageBlockType
  page: Page
}

enum PageBlockType {
  Discord
  Github
  Google
  Header
  Link
  Solana
  Twitter
}

type Profile {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  username: String
  bio: String
  avatarUrl: String
  metaUrl: String
  color: String
  followers: Int
  following: Int
  type: ProfileType
  status: ProfileStatus
  owner: User
  page: Page
  gumProfile: Account
  gumProfileMeta: Account
  identities: [Identity!]
}

enum ProfileType {
  Degen
  Gaming
  Personal
  Professional
}

enum ProfileStatus {
  Demo
  Draft
  Published
}

type User {
  id: String
  pid: Int
  createdAt: DateTime
  updatedAt: DateTime
  username: String
  profileUrl: String
  publicKey: String
  role: UserRole
  status: UserStatus
  identities: [Identity!]
  followers: [Follow!]
  followersCount: Int
  following: [Follow!]
  followingCount: Int
  gumUser: Account
  profile: Profile
  profiles: [Profile!]
  relation: UserRelation
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

type Follow {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  followerId: String
  follower: User
  ownerId: String
  owner: User
}

type UserRelation {
  isYou: Boolean!
  isFollowingYou: Boolean!
  isFollowedByYou: Boolean!
}

type Cluster {
  id: String!
  name: String!
  type: ClusterType!
  endpoint: String!
  explorerUrl: String!
}

enum ClusterType {
  Custom
  Devnet
  Mainnet
  Testnet
}

type ConfigApi {
  name: String!
  version: String!
  url: String!
}

type ConfigApp {
  description: String!
  name: String!
  url: String!
}

type Config {
  api: ConfigApi!
  app: ConfigApp!
  cluster: Cluster!
  clusters: [Cluster!]!
}

type Setting {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  default: String
  description: String
  key: String
  value: String
}

type AuthChallengeRequest {
  challenge: String!
  expiresAt: String!
}

type Invite {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  expiresAt: Timestamp
  code: String
  maxUses: Int
  useCount: Int
  owner: User
  users: [User!]
  inviteUrl: String
  isExpired: Boolean
  isUsedUp: Boolean
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type PlanFeature {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  order: Int
}

type Plan {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  available: Boolean
  features: [PlanFeature!]
}

type SearchResult {
  accounts: [Account!]
  users: [User!]
}

type Query {
  uptime: Float!
  adminGetSettings: [Setting!]
  adminGetAccount(accountId: String!): Account
  adminGetAccounts(input: AdminGetAccountsInput!): [Account!]
  userGetAccount(network: NetworkType!, address: String!, refresh: Boolean): Account
  userGetAccountHistory(network: NetworkType!, address: String!): JSON
  getMe: User
  anonRequestChallenge(publicKey: String!): AuthChallengeRequest
  config: Config
  adminGetDomains(input: AdminGetDomainsInput): [Domain!]
  adminGetDomain(domainId: String!): Domain
  userGetIdentity(identityId: String!): Identity
  userGetIdentities: [Identity!]
  adminGetInvites(input: AdminGetInvitesInput): [Invite!]
  adminGetInvite(inviteId: String!): Invite
  anonGetInvite(code: String!): Invite
  userGetInvite: Invite
  userGetInvites: [Invite!]
  adminGetPageDomain(domainId: String!, path: String!): PageDomain
  adminGetPages(input: AdminGetPagesInput): [Page!]
  adminGetPage(pageId: String!): Page
  anonGetPage(pageId: String!): Page
  userGetPage(pageId: String!): Page
  anonGetPlans: [Plan!]
  adminGetPlans(input: AdminGetPlansInput): [Plan!]
  adminGetPlan(planId: String!): Plan
  adminGetProfile(profileId: String!): Profile
  adminGetProfiles(input: AdminGetProfilesInput): [Profile!]
  userGetProfile(profileId: String!): Profile
  userGetProfilePage(profileId: String!): Page
  userGetProfiles: [Profile!]
  adminGetQueue(type: QueueType!): Queue
  adminGetQueueJobs(type: QueueType!, statuses: [JobStatus!]!): [Job!]
  adminGetQueues: [Queue!]
  anonGetUser(username: String!): User
  anonGetUserFollowers(username: String!): [User!]
  anonGetUserFollowing(username: String!): [User!]
  anonGetUserInvites(username: String!): [Invite!]
  anonGetUserPages(username: String!): [Page!]
  anonGetUserProfiles(username: String!): JSON
  adminGetUser(userId: String!): User
  adminGetUsers: [User!]
}

input AdminGetAccountsInput {
  network: NetworkType
  type: AccountType
  address: String
  program: String
  name: String
}

input AdminGetDomainsInput {
  ownerId: String
}

input AdminGetInvitesInput {
  ownerId: String
}

input AdminGetPagesInput {
  ownerId: String
}

input AdminGetPlansInput {
  id: String
}

input AdminGetProfilesInput {
  ownerId: String
}

enum JobStatus {
  completed
  waiting
  active
  delayed
  failed
  paused
}

type Mutation {
  adminSetSetting(key: String!, value: String!): Setting
  userLogout: Boolean
  anonRespondChallenge(challenge: String!, publicKey: String!, signature: String!): User
  adminCreateDomain(input: AdminCreateDomainInput!): Domain
  adminDeleteDomain(domainId: String!): Domain
  adminUpdateDomain(domainId: String!, input: AdminUpdateDomainInput!): Domain
  userLinkIdentity(provider: IdentityProvider!, providerId: String!): User
  userDeleteIdentity(identityId: String!): User
  userSyncIdentity(identityId: String!): Identity
  adminCreateInvite(input: AdminCreateInviteInput!): Invite
  adminDeleteInvite(inviteId: String!): Invite
  adminUpdateInvite(inviteId: String!, input: AdminUpdateInviteInput!): Invite
  userAcceptInvite(code: String!): Invite
  adminAddPageBlock(pageId: String!, input: AdminAddPageBlockInput!): PageBlock
  adminRemovePageBlock(pageId: String!, pageBlockId: String!): PageBlock
  adminUpdatePageBlock(pageId: String!, pageBlockId: String!, input: AdminUpdatePageBlockInput!): PageBlock
  adminAddPageDomain(pageId: String!, input: AdminAddPageDomainInput!): PageDomain
  adminRemovePageDomain(pageId: String!, pageDomainId: String!): PageDomain
  adminCreatePage(input: AdminCreatePageInput!): Page
  adminDeletePage(pageId: String!): Page
  adminUpdatePage(pageId: String!, input: AdminUpdatePageInput!): Page
  userAddPageBlock(pageId: String!, input: UserAddPageBlockInput!): PageBlock
  userRemovePageBlock(pageId: String!, pageBlockId: String!): PageBlock
  userUpdatePageBlock(pageId: String!, pageBlockId: String!, input: UserUpdatePageBlockInput!): PageBlock
  userCreatePage(input: UserCreatePageInput!): Page
  userDeletePage(pageId: String!): Page
  userUpdatePage(pageId: String!, input: UserUpdatePageInput!): Page
  adminCreatePlan(input: AdminCreatePlanInput!): Plan
  adminDeletePlan(planId: String!): Plan
  adminUpdatePlan(planId: String!, input: AdminUpdatePlanInput!): Plan
  adminDeleteProfile(profileId: String!): Profile
  adminUpdateProfile(profileId: String!, input: AdminUpdateProfileInput!): Profile
  userCreateProfile(type: ProfileType!): Profile
  userDeleteProfile(profileId: String!): Profile
  userSyncProfile(profileId: String!): Profile
  userVerifyProfile(profileId: String!): Profile
  userSetDefaultProfile(profileId: String!): Profile
  userUpdateProfile(profileId: String!, input: UserUpdateProfileInput!): Profile
  userLinkProfileIdentity(profileId: String!, identityId: String!): Profile
  userUnlinkProfileIdentity(profileId: String!, identityId: String!): Profile
  adminCleanQueue(type: QueueType!): Boolean
  adminDeleteQueueJob(type: QueueType!, jobId: String!): Boolean
  adminPauseQueue(type: QueueType!): Boolean
  adminResumeQueue(type: QueueType!): Boolean
  userSearch(input: UserSearchInput!): SearchResult
  userFollowUser(username: String!): User
  userUnfollowUser(username: String!): User
  userUpdateUser(input: UserUpdateUserInput!): User
  userVerifyUser: User
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteUser(userId: String!): User
  adminUpdateUser(userId: String!, input: AdminUpdateUserInput!): User
}

input AdminCreateDomainInput {
  name: String!
  ownerId: String
  private: Boolean
  premium: Boolean
  secure: Boolean
}

input AdminUpdateDomainInput {
  private: Boolean
  premium: Boolean
  secure: Boolean
  order: Int
}

input AdminCreateInviteInput {
  expiresAt: String
  ownerId: String
  maxUses: Int
}

input AdminUpdateInviteInput {
  expiresAt: Timestamp
  maxUses: Int
}

input AdminAddPageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input AdminUpdatePageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input AdminAddPageDomainInput {
  domainId: String!
  path: String!
}

input AdminCreatePageInput {
  title: String!
  description: String!
  ownerId: String
  profileId: String!
  color: String
  type: PageType
}

input AdminUpdatePageInput {
  title: String
  description: String
  color: String
  profileId: String
}

input UserAddPageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input UserUpdatePageBlockInput {
  order: Int
  data: JSON
  type: PageBlockType
}

input UserCreatePageInput {
  profileId: String
}

input UserUpdatePageInput {
  title: String
  description: String
  color: String
}

input AdminCreatePlanInput {
  name: String!
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  active: Boolean
}

input AdminUpdatePlanInput {
  name: String
  description: String
  priceMonth: Int
  priceYear: Int
  currency: String
  recommended: Boolean
  available: Boolean
}

input AdminUpdateProfileInput {
  name: String
  username: String
  bio: String
  avatarUrl: String
  metaUrl: String
  color: String
  followers: Int
  following: Int
  type: ProfileType
}

input UserUpdateProfileInput {
  name: String
  username: String
  bio: String
  avatarUrl: String
  metaUrl: String
  color: String
}

input UserSearchInput {
  query: String!
}

input UserUpdateUserInput {
  username: String
}

input AdminCreateUserInput {
  publicKey: String
  role: UserRole
}

input AdminUpdateUserInput {
  username: String
  role: UserRole
  status: UserStatus
}
